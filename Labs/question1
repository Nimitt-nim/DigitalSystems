module SmartMathTutor{
    input [3:0]S;
    input[4:0]R;
    output OUT;
}
    reg [31:0] Rd;
    always @(*) begin
        // Range

        // Rd[0] = (~R[0] & ~R[1] & ~R[2] & ~R[3] & ~R[4]);
        // Rd[1] = (R[0] & ~R[1] & ~R[2] & ~R[3] & ~R[4]);


        Rd[2] = (~R[0]);
        Rd[3] = ( ~R[4]& ~R[3]& ~R[2]& ~R[1]& ~R[0]  | ~R[4]& ~R[3]& ~R[2]& R[1]& R[0]  | ~R[4]& ~bR[2]& R[1]& ~R[0]  | ~R[4]& b~R[2]& ~R[1]& R[0]  | ~R[4]& bR[2]& ~R[1]& ~R[0]  | ~R[4]& bR[2]& R[1]& R[0]  | R[4]& ~R[3]& ~R[2]& R[1]& ~R[0]  | R[4]& ~bR[2]& ~R[1]& R[0]  | R[4]& b~R[2]& ~R[1]& ~R[0]  | R[4]& b~R[2]& R[1]& R[0]  | R[4]& bR[2]& R[1]& ~R[0] );
        Rd[4] = (~R[1]& ~R[0] );
        Rd[5] = (~R[4]& ~R[3]& ~R[2]& ~R[1]& ~R[0]  | ~R[4]& ~bR[2]& ~R[1]& R[0]  | ~R[4]& b~R[2]& R[1]& ~R[0]  | ~R[4]& bR[2]& R[1]& R[0]  | R[4]& ~bR[2]& ~R[1]& ~R[0]  | R[4]& b~R[2]& ~R[1]& R[0] | R[4]& bR[2]& R[1]& ~R[0]);
        Rd[6] = (~R[4]& ~R[3]& ~R[2]& ~R[1]& ~R[0]  | ~R[4]& ~bR[2]& R[1]& ~R[0]  | ~R[4]& bR[2]& ~R[1]& ~R[0]  | R[4]& ~R[3]& ~R[2]& R[1]& ~R[0] | R[4]& b~R[2]& ~R[1]& ~R[0]  | R[4]& bR[2]& R[1]& ~R[0]& );
        Rd[7] = (~R[4]& ~R[3]& ~R[2]& ~R[1]& ~R[0] | ~R[4]& ~bR[2]& R[1]& R[0] | ~R[4]& bR[2]& R[1]& ~R[0]&  | R[4]& ~bR[2]& ~R[1]& R[0]  | R[4]& bR[2]& ~R[1]& ~R[0]& );
        Rd[8] = (~R[2]& ~R[1]& ~R[0] );
        Rd[9] = ( ~R[4]& ~R[3]& ~R[2]& ~R[1]& ~R[0]  | ~R[4]& b~R[2]& ~R[1]& R[0] | R[4]& ~R[3]& ~R[2]& R[1]& ~R[0]  | R[4]& b~R[2]& R[1]& R[0]& );

        // Decoding S
        // Sd[0] = (~S[0] & ~S[1] & ~S[2] & ~S[3]);


        Sd[1] = (S[0] & ~S[1] & ~S[2] & ~S[3]);
        Sd[2] = (~S[0] & S[1] & ~S[2] & ~S[3]);
        Sd[3] = (S[0] & S[1] & ~S[2] & ~S[3]);
        Sd[4] = (~S[0] & ~S[1] & S[2] & ~S[3]);
        Sd[5] = (S[0] & ~S[1] & S[2] & ~S[3]);
        Sd[6] = (~S[0] & S[1] & S[2] & ~S[3]);
        Sd[7] = (S[0] & S[1] & S[2] & ~S[3]);
        Sd[8] = (~S[0] & ~S[1] & ~S[2] & S[3]);
        Sd[9] = (S[0] & ~S[1] & ~S[2] & S[3]);


        // Sd[10] = (~S[0] & S[1] & ~S[2] & S[3]);
        // Sd[11] = (S[0] & S[1] & ~S[2] & S[3]);
        // Sd[12] = (~S[0] & ~S[1] & S[2] & S[3]);
        // Sd[13] = (S[0] & ~S[1] & S[2] & S[3]);
        // Sd[14] = (~S[0] & S[1] & S[2] & S[3]);
        // Sd[15] = (S[0] & S[1] & S[2] & S[3]);


        OUT = ( Sd[1] | (Sd[2] & Rd[2]) | (Sd[3] & Rd[3]) | (Sd[4] & Rd[5]) | (Sd[6] & Rd[6]) | (Sd[7] & Rd[7]) | (Sd[8] & Rd[8]) | (Sd[9] & Rd[9]))

    end
endmodule