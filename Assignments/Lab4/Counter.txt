`timescale 1ns / 1ps
module tff ( input clk, input reset, input t, input preset, input start, output reg q);  
  
  always @ (posedge clk) begin  
    if (!reset)  
      q <= 0;  
    if (!preset)
      q <= 1;
    else  
        if (t)  
            q <= ~q;  
        else  
            q <= q;  
  end  
endmodule

module binary_bcd(input t, input clk, input reset, output [3:0]count, input up_down ,input bin_bcd);

// and(cond1,~bin_bcd,reset);
// and(cond2,count[3],count[1]);
// or (cond3,reset,cond2);
// and(cond4,cond3,bin_bcd);
// or(cond5,cond1,cond4);
or (cond6, cond5, start);
and (cond7, ~up_down);

// and(condp1,~bin_bcd,reset);
// and(condp2,count[3],count[1]);
// or (condp3,reset,cond2);
// and(condp4,cond3,bin_bcd);
// or(condp5,cond1,cond4);
or (condp6, cond5, start);
and (condp7, ~up_down);


tff a1(.t(t),.clk(clk),.reset(cond6), .preset(), .q(count[0]));

//binary up down counter
and(g1,~up_down,count[0],~bin_bcd);
and(g2,up_down,~count[0],~bin_bcd);
or(f1,g1,g2);
//bcd up down counter

tff a2(.t(f1),.clk(clk),.reset(cond6),.preset(), .q(count[1]));

//binary up down counter
and(h1,g1,count[1],~bin_bcd);
and(h2,g2,~count[1],~bin_bcd);
or(f2,h1,h2);
//bcd up down counter

tff a3(.t(f2),.clk(clk),.reset(cond6), .preset(), .q(count[2]));

//binary up down counter
and(i1,h1,count[2],~bin_bcd);
and(i2,h2,~count[2],~bin_bcd);
or(f3,i1,i2);
//bcd up down counter

tff a4(.t(f3),.clk(clk),.reset(cond6),. preset(), .q(count[3]));

endmodule