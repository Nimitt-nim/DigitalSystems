`timescale 1ns / 1ps

module uart_adder(
    input clk_100MHz, 
    input reset,            // btnR    
    input rst,
    input rx,               // USB-RS232 Rx
    input btn,              // btnL (read and write FIFO operation)
    output tx              // USB-RS232 Tx
//    output [3:0] an,        // 7 segment display digits
//    output [0:6] seg,       // 7 segment display segments
//    output [7:0] LED        // data byte display
    );
    
    // Connection Signals
    wire rx_full, rx_empty, btn_tick;
    wire [7:0] rec_data;
    reg [7:0] reg_data = 8'b0; // 8-bit register to hold accumulated value
    reg [7:0] result = 8'b0;   // 8-bit register to hold the result
    
    // Complete UART Core
    uart_top UART_UNIT
        (
            .clk_100MHz(clk_100MHz),
            .reset(reset),
            .read_uart(btn_tick),
            .write_uart(btn_tick),
            .rx(rx),
            .write_data(result),
            .rx_full(rx_full),
            .rx_empty(rx_empty),
            .read_data(rec_data),
            .tx(tx)
        );
    
    // Button Debouncer
    debounce_explicit BUTTON_DEBOUNCER
        (
            .clk_100MHz(clk_100MHz),
            .reset(reset),
            .btn(btn),         
            .db_level(),  
            .db_tick(btn_tick)
        );

    // Adder
    always @(rst, btn_tick) begin
        if (rst) begin
            reg_data <= 8'd0; // Reset the accumulator register
        end else begin
            reg_data <= reg_data + rec_data; // Add received data to accumulator
            result <= reg_data; // Store result
        end
    end 
  
    // Signal Logic    
    //assign rec_data1 = rec_data + 1;    // add 1 to ascii value of received data (to transmit)
endmodule